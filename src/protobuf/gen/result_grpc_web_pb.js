/**
 * @fileoverview gRPC-Web generated client stub for result
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.20.3
// source: result.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js')
const proto = {};
proto.result = require('./result_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.result.ResultServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.result.ResultServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.result.CommunicateTaskManuallyRequest,
 *   !proto.result.CommunicateTaskManuallyResponse>}
 */
const methodDescriptor_ResultService_CommunicateTaskManually = new grpc.web.MethodDescriptor(
  '/result.ResultService/CommunicateTaskManually',
  grpc.web.MethodType.UNARY,
  proto.result.CommunicateTaskManuallyRequest,
  proto.result.CommunicateTaskManuallyResponse,
  /**
   * @param {!proto.result.CommunicateTaskManuallyRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.result.CommunicateTaskManuallyResponse.deserializeBinary
);


/**
 * @param {!proto.result.CommunicateTaskManuallyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.result.CommunicateTaskManuallyResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.result.CommunicateTaskManuallyResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.result.ResultServiceClient.prototype.communicateTaskManually =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/result.ResultService/CommunicateTaskManually',
      request,
      metadata || {},
      methodDescriptor_ResultService_CommunicateTaskManually,
      callback);
};


/**
 * @param {!proto.result.CommunicateTaskManuallyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.result.CommunicateTaskManuallyResponse>}
 *     Promise that resolves to the response
 */
proto.result.ResultServicePromiseClient.prototype.communicateTaskManually =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/result.ResultService/CommunicateTaskManually',
      request,
      metadata || {},
      methodDescriptor_ResultService_CommunicateTaskManually);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.result.GetBatchResultsRequest,
 *   !proto.result.ListResultsResponse>}
 */
const methodDescriptor_ResultService_GetBatchResults = new grpc.web.MethodDescriptor(
  '/result.ResultService/GetBatchResults',
  grpc.web.MethodType.UNARY,
  proto.result.GetBatchResultsRequest,
  proto.result.ListResultsResponse,
  /**
   * @param {!proto.result.GetBatchResultsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.result.ListResultsResponse.deserializeBinary
);


/**
 * @param {!proto.result.GetBatchResultsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.result.ListResultsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.result.ListResultsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.result.ResultServiceClient.prototype.getBatchResults =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/result.ResultService/GetBatchResults',
      request,
      metadata || {},
      methodDescriptor_ResultService_GetBatchResults,
      callback);
};


/**
 * @param {!proto.result.GetBatchResultsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.result.ListResultsResponse>}
 *     Promise that resolves to the response
 */
proto.result.ResultServicePromiseClient.prototype.getBatchResults =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/result.ResultService/GetBatchResults',
      request,
      metadata || {},
      methodDescriptor_ResultService_GetBatchResults);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.result.GetTaskBatchesRequest,
 *   !proto.result.ListBatchesResponse>}
 */
const methodDescriptor_ResultService_GetTaskBatches = new grpc.web.MethodDescriptor(
  '/result.ResultService/GetTaskBatches',
  grpc.web.MethodType.UNARY,
  proto.result.GetTaskBatchesRequest,
  proto.result.ListBatchesResponse,
  /**
   * @param {!proto.result.GetTaskBatchesRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.result.ListBatchesResponse.deserializeBinary
);


/**
 * @param {!proto.result.GetTaskBatchesRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.result.ListBatchesResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.result.ListBatchesResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.result.ResultServiceClient.prototype.getTaskBatches =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/result.ResultService/GetTaskBatches',
      request,
      metadata || {},
      methodDescriptor_ResultService_GetTaskBatches,
      callback);
};


/**
 * @param {!proto.result.GetTaskBatchesRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.result.ListBatchesResponse>}
 *     Promise that resolves to the response
 */
proto.result.ResultServicePromiseClient.prototype.getTaskBatches =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/result.ResultService/GetTaskBatches',
      request,
      metadata || {},
      methodDescriptor_ResultService_GetTaskBatches);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.result.StreamResultsRequest,
 *   !proto.result.StreamResultsResponse>}
 */
const methodDescriptor_ResultService_StreamResults = new grpc.web.MethodDescriptor(
  '/result.ResultService/StreamResults',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.result.StreamResultsRequest,
  proto.result.StreamResultsResponse,
  /**
   * @param {!proto.result.StreamResultsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.result.StreamResultsResponse.deserializeBinary
);


/**
 * @param {!proto.result.StreamResultsRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.result.StreamResultsResponse>}
 *     The XHR Node Readable Stream
 */
proto.result.ResultServiceClient.prototype.streamResults =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/result.ResultService/StreamResults',
      request,
      metadata || {},
      methodDescriptor_ResultService_StreamResults);
};


/**
 * @param {!proto.result.StreamResultsRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.result.StreamResultsResponse>}
 *     The XHR Node Readable Stream
 */
proto.result.ResultServicePromiseClient.prototype.streamResults =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/result.ResultService/StreamResults',
      request,
      metadata || {},
      methodDescriptor_ResultService_StreamResults);
};


module.exports = proto.result;

